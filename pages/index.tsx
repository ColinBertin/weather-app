import LineChart from "@/components/Charts";
import LoadingSpinner from "@/components/LoadingSpinner";
import PrevisionCards from "@/components/PrevisionCards";
import SearchBar from "@/components/SearchBar";
import TodayCard from "@/components/TodayCard";
import { Coords, Forecast, Location, Prevision } from "@/types";
import Head from "next/head";
import { ChangeEvent, useCallback, useEffect, useState } from "react";

export default function Home() {
  const [forecast, setForecast] = useState<Forecast>();
  const [previsions, setPrevisions] = useState<Prevision[]>()
  const [location, setLocation] = useState<Location>();
  const [request, setRequest] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const getWeatherData = async (coords: Coords) => {
    try {
      const response = await fetch(
        `/api/forecast?lon=${coords.lon}&lat=${coords.lat}`
      );
      const data = await response.json();

      const { today, todayPrevision, previsions } = data;

      setForecast({
        today,
        todayPrevision,
      });
      setPrevisions(previsions)
    } catch (error) {
      console.error(error);
    }
    setIsLoading(false);
  };

  const getCoords = useCallback(
    async (name: string) => {
      setIsLoading(true);
      try {
        const response = await fetch(
          `/api/coordinates?name=${request || name}`
        );
        const data = await response.json();
        const coords = { lat: data.lat, lon: data.lon };
        const location = {
          country: data.country,
          city: data.city,
        };

        setIsLoading(false);
        getWeatherData(coords);
        setLocation(location);
      } catch (error) {
        console.log(error);
        setIsLoading(false);
      }
    },
    [request]
  );

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    setRequest(e.target.value);
  };

  // const getLocationName = useCallback(
  //   async (coords: Coords) => {
  //     setIsLoading(true);
  //     const url =
  //       await `http://api.openweathermap.org/geo/1.0/reverse?lat=${coords.lat}&lon=${coords.lon}&limit=10&appid=${process.env.NEXT_PUBLIC_WEATHER_API_KEY}`;
  //     const response = await fetch(url);
  //     const data = await response.json();
  //     getCoords(data[0].name);
  //     setIsLoading(false);
  //   },
  //   [request, coords]
  // );

  useEffect(() => {
    if (request === "") {
      setIsLoading(true);
      // navigator.geolocation.getCurrentPosition(
      //   (position) => {
      //     // getLocationName({
      //     //   lat: position.coords.latitude,
      //     //   lon: position.coords.longitude,
      //     // });
      //     console.log("need HTTPS to manage it");
      //   },
      // );
      setRequest("London");
      getCoords("London");
      setIsLoading(false);
    }
  }, [getCoords, request]);

  return (
    <>
      <Head>
        <title>Weather App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col h-screen p-6">
        {isLoading ? (
          <LoadingSpinner />
        ) : (
          <div className="m-auto">
            <h1 className="text-center text-4xl mb-8">My Weather Forecast</h1>
            <SearchBar
              handleChange={handleChange}
              getCoords={getCoords}
              isLoading={isLoading}
            />
            {forecast && location && previsions && (
              <>
                <TodayCard
                  forecast={{
                    today: forecast.today,
                    todayPrevision: forecast.todayPrevision,
                  }}
                  location={location}
                />
                <LineChart previsions={previsions} />
                <div className="flex flex-wrap gap-5 justify-center mb-8">
                  {previsions.map((prevision: Prevision) => {
                    return (
                      <PrevisionCards key={prevision.dt} data={prevision} />
                    );
                  })}
                </div>
              </>
            )}
          </div>
        )}
      </main>
    </>
  );
}
